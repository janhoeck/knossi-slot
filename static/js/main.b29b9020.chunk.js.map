{"version":3,"sources":["tools/context/AccountContext.tsx","tools/Theme.ts","views/tools/SlotSymbols.ts","views/assets/slotImages/knossi.png","views/assets/slotImages/sascha.png","views/assets/slotImages/mannymarc.png","views/assets/slotImages/sido.png","views/tools/helpers/slotGeneratorHelper.ts","views/tools/helpers/winResultCalculator.ts","views/tools/SlotContext.tsx","components/Button/Button.tsx","components/Button/RoundButton.tsx","views/components/actionBar/MoneyStakeAction.tsx","views/components/actionBar/SpinAction.tsx","views/components/actionBar/Balance.tsx","views/components/actionBar/SlotActionBar.tsx","views/components/slot/SlotItem.tsx","views/assets/spin-click-sound.mp3","views/components/slot/SlotColumn.tsx","views/components/winIndicatorGrind/WinIndicatorItem.tsx","views/components/winIndicatorGrind/WinIndicatorGrid.tsx","views/components/slot/Slot.tsx","views/components/AmountOfProfitDisplay.tsx","views/SlotViewContent.tsx","views/SlotView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AccountContext","createContext","AccountContextProvider","children","store","initialMoney","useState","money","setMoney","increaseMoney","amount","decreaseMoney","useStore","Provider","value","theme","spacing","palette","common","white","black","border","primary","light","main","dark","background","default","SlotSymbols","weight","image","getRandomSymbol","weightedSlotSymbols","slotSymbolIndex","length","weightIndex","push","index","Math","floor","random","generateSymbols","rows","columns","slotSymbols","rowIndex","columnIndex","Array","isArray","slotSymbol","iterate","visibleSlotSymbols","callback","columnItem","checkWin","symbols","firstSymbolValue","every","symbol","getWinningSymbols","rowsAmount","columnAmount","winningSymbols","_rowIndex","SlotContext","SlotContextProvider","columnsAmount","slotRef","useRef","moneyStake","setMoneyStake","isSpinning","setSpinning","isAutoSpinMode","setAutoSpinMode","symbolsMap","setSymbolsMap","lastAmountOfProfit","setLastAmountOfProfit","setWinningSymbols","registerSlot","useCallback","slot","current","spin","a","undefined","generatedSlotSymbols","useSlotContext","useContext","useStyles","createUseStyles","root","padding","display","alignItems","justifyContent","cursor","color","outline","disabled","backgroundColor","name","Button","props","className","classesProp","classes","restProps","classNames","borderRadius","width","height","RoundButton","icon","fontSize","button","container","textAlign","margin","MoneyStakeAction","increase","decrease","decreaseDisabled","increaseDisabled","onClick","toFixed","zIndex","SpinAction","Balance","balance","position","autoSpinAction","spinAction","left","bottom","SlotActionBar","displayName","backgroundPosition","backgroundRepeat","backgroundSize","text","top","transform","highlight","animation","SlotItem","style","backgroundImage","transition","slotItem","audio","Audio","spinSound","SlotColumn","forwardRef","ref","rootRef","spinTime","Promise","resolve","internalPosition","intervalId","setInterval","setTimeout","clearInterval","play","spinResult","symbolHeight","visibleSlotItemAmount","offset","from","map","_","symbolsIndex","reverse","calculateVisibleSymbols","useImperativeHandle","canvas","WinIndicatorItem","memo","beforeWinningSymbol","winningSymbol","nextWinningSymbol","canvasRef","useEffect","canvasContext","getContext","beforeRowIndex","nextRowIndex","getBoundingClientRect","xCenter","yCenter","console","log","beginPath","lineWidth","moveTo","lineTo","stroke","column","flexDirection","flex","item","WinIndicatorGrid","rowAmount","keys","winningSymbolIndex","findIndex","getWinningSymbolIndex","gridTemplateColumns","overflow","slotColumn","winIndicatorGrid","Slot","columnWidth","setColumnWidth","columnRefs","handleSlotColumnRef","all","columnRef","visibleSymbols","useLayoutEffect","fontWeight","opacity","animationPlayState","AmountOfProfitDisplay","slotContainer","maxWidth","actionBar","SlotViewContent","SlotView","IconContextValue","size","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b29b9020.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nexport type AccountContextType = ReturnType<typeof useStore>;\n// Create the context\nconst AccountContext = createContext<AccountContextType>({} as any);\n\n// Create the context provider\nconst useStore = (initialMoney = 0.0) => {\n    const [money, setMoney] = useState<number>(initialMoney);\n\n    const increaseMoney = (amount: number) => setMoney((money) => money + amount);\n    const decreaseMoney = (amount: number) => setMoney((money) => money - amount);\n\n    return {\n        money,\n        setMoney,\n        increaseMoney,\n        decreaseMoney,\n    };\n};\n\nexport interface SlotContextProviderProps {\n    initialMoney?: number;\n}\n\nexport const AccountContextProvider: React.FunctionComponent<SlotContextProviderProps> = ({ children, initialMoney }) => {\n    const store = useStore(initialMoney);\n    return <AccountContext.Provider value={store}>{children}</AccountContext.Provider>;\n};\n\n// Create the hook to access the context\nexport const useAccountContext = () => useContext<AccountContextType>(AccountContext);\n","export const theme = {\n    spacing: 8,\n    palette: {\n        common: {\n            white: '#fff',\n            black: '#000',\n            border: '#d6f2f4',\n        },\n        primary: {\n            light: '#7ae7db',\n            main: '#249ab3',\n            dark: '#0a455d',\n        },\n        background: {\n            default: '',\n        },\n    },\n};\n\nexport type Theme = typeof theme;\n","import knossiImage from '../assets/slotImages/knossi.png';\nimport saschaImage from '../assets/slotImages/sascha.png';\nimport mannyMarcImage from '../assets/slotImages/mannymarc.png';\nimport sidoImage from '../assets/slotImages/sido.png';\n\nexport type SlotSymbolValue = 'KNOSSI' | 'SASCHA' | 'MANNY_MARC' | 'SIDO';\n\nexport interface SlotSymbol {\n    value: SlotSymbolValue;\n    /**\n     * weight for this slotSymbol. Will be used to get a random item\n     */\n    weight: number;\n    image?: string;\n}\n\nexport interface ExtendedSlotSymbol extends SlotSymbol {\n    rowIndex: number;\n    columnIndex: number;\n    highlight?: boolean;\n}\n\nexport const SlotSymbols: SlotSymbol[] = [\n    {\n        value: 'KNOSSI',\n        weight: 2,\n        image: knossiImage,\n    },\n    {\n        value: 'SASCHA',\n        weight: 1,\n        image: saschaImage,\n    },\n    {\n        value: 'MANNY_MARC',\n        weight: 1,\n        image: mannyMarcImage,\n    },\n    {\n        value: 'SIDO',\n        weight: 2,\n        image: sidoImage,\n    },\n];\n\nexport const getRandomSymbol = (): SlotSymbol => {\n    const weightedSlotSymbols = [];\n    for (let slotSymbolIndex = 0; slotSymbolIndex < SlotSymbols.length; slotSymbolIndex++) {\n        for (let weightIndex = 0; weightIndex < SlotSymbols[slotSymbolIndex].weight; weightIndex++) {\n            weightedSlotSymbols.push(slotSymbolIndex);\n        }\n    }\n\n    const index = weightedSlotSymbols[Math.floor(Math.random() * weightedSlotSymbols.length)];\n    return SlotSymbols[index];\n};\n\nexport const getSymbol = (value: SlotSymbolValue): SlotSymbol => {\n    return SlotSymbols.find((symbol) => symbol.value === value) as SlotSymbol;\n};\n","export default __webpack_public_path__ + \"static/media/knossi.8439d885.png\";","export default __webpack_public_path__ + \"static/media/sascha.67d054ea.png\";","export default __webpack_public_path__ + \"static/media/mannymarc.67aeda60.png\";","export default __webpack_public_path__ + \"static/media/sido.9c8b4f75.png\";","import { ExtendedSlotSymbol, getRandomSymbol } from '../SlotSymbols';\n\nexport const generateSymbols = (rows: number, columns: number): ExtendedSlotSymbol[][] => {\n    const slotSymbols: ExtendedSlotSymbol[][] = [];\n    // We have to add +5 here, because this will be faked rows which won't be displayed to the user\n    // But we need this for the scroll effect\n    for (let rowIndex = 0; rowIndex < rows + 5; rowIndex++) {\n        for (let columnIndex = 0; columnIndex < columns; columnIndex++) {\n            if (!Array.isArray(slotSymbols[columnIndex])) {\n                slotSymbols[columnIndex] = [];\n            }\n\n            const slotSymbol = getRandomSymbol();\n            slotSymbols[columnIndex][rowIndex] = { ...slotSymbol, rowIndex: rowIndex, columnIndex: columnIndex };\n        }\n    }\n\n    return slotSymbols;\n};\n","import { ExtendedSlotSymbol } from '../SlotSymbols';\n\nconst iterate = (visibleSlotSymbols: ExtendedSlotSymbol[][], callback: (columnIndex: number, rowIndex: number) => void) => {\n    for (let columnIndex = 0; columnIndex < visibleSlotSymbols.length; columnIndex++) {\n        const columnItem = visibleSlotSymbols[columnIndex];\n        for (let rowIndex = 0; rowIndex < columnItem.length; rowIndex++) {\n            callback(columnIndex, rowIndex);\n        }\n    }\n};\n\n/**\n * Checks if all symbols are from the same type\n * @param symbols\n */\nconst checkWin = (symbols: ExtendedSlotSymbol[]): boolean => {\n    const firstSymbolValue = symbols[0].value;\n    return symbols.every((symbol) => symbol.value === firstSymbolValue);\n};\n\nexport const getWinningSymbols = (visibleSlotSymbols: ExtendedSlotSymbol[][], rowsAmount: number, columnAmount: number): ExtendedSlotSymbol[][] => {\n    const winningSymbols: ExtendedSlotSymbol[][] = [];\n\n    /**\n     * Check each row of the slot. Example:\n     * X X X X X\n     * - - - - -\n     * X X X X X\n     */\n    for (let rowIndex = 0; rowIndex < rowsAmount; rowIndex++) {\n        const symbols: ExtendedSlotSymbol[] = [];\n        iterate(visibleSlotSymbols, (columnIndex, _rowIndex) => {\n            if (rowIndex === _rowIndex) {\n                symbols.push(visibleSlotSymbols[columnIndex][_rowIndex]);\n            }\n        });\n\n        const isWin = checkWin(symbols);\n        if (isWin) {\n            winningSymbols.push(symbols);\n        }\n    }\n\n    /**\n     * Check the V of the slot. Example:\n     * \\ X X X /\n     * X \\ X / X\n     * X X - X X\n     */\n    const symbols: ExtendedSlotSymbol[] = [];\n    iterate(visibleSlotSymbols, (columnIndex, rowIndex) => {\n        const symbol = visibleSlotSymbols[columnIndex][rowIndex];\n        if (columnIndex === rowIndex) {\n            symbols.push(symbol);\n            return;\n        }\n\n        if (rowIndex === rowsAmount - 1) {\n            return;\n        }\n\n        if (columnAmount / 2 <= columnIndex && (columnIndex - rowIndex) % 2 === 0) {\n            symbols.push(symbol);\n        }\n    });\n\n    const isWin = checkWin(symbols);\n    if (isWin) {\n        winningSymbols.push(symbols);\n    }\n\n    return winningSymbols;\n};\n","import React, { createContext, useCallback, useContext, useRef, useState } from 'react';\nimport { SlotRef } from '../components/slot/Slot';\nimport { generateSymbols } from './helpers/slotGeneratorHelper';\nimport { ExtendedSlotSymbol } from './SlotSymbols';\nimport { getWinningSymbols } from './helpers/winResultCalculator';\n\nexport type SlotContextType = ReturnType<typeof useStore>;\n// Create the context\nexport const SlotContext = createContext<SlotContextType>({} as any);\n\nexport interface SpinResult {\n    symbol: ExtendedSlotSymbol;\n    index: number;\n}\n\n// Create the context provider\nconst useStore = (rowsAmount = 3, columnsAmount = 5) => {\n    const slotRef = useRef<SlotRef>();\n    const [moneyStake, setMoneyStake] = useState<number>(1.0);\n    const [isSpinning, setSpinning] = useState<boolean>(false);\n    const [isAutoSpinMode, setAutoSpinMode] = useState<boolean>(false);\n    const [symbolsMap, setSymbolsMap] = useState<ExtendedSlotSymbol[][]>(generateSymbols(rowsAmount, columnsAmount));\n    const [lastAmountOfProfit, setLastAmountOfProfit] = useState<number>();\n    const [winningSymbols, setWinningSymbols] = useState<ExtendedSlotSymbol[][]>([]);\n\n    const registerSlot = useCallback((slot: SlotRef) => {\n        slotRef.current = slot;\n    }, []);\n\n    const spin = useCallback(async () => {\n        setLastAmountOfProfit(undefined);\n        setWinningSymbols([]);\n\n        const { current } = slotRef;\n        if (current) {\n            const generatedSlotSymbols = generateSymbols(rowsAmount, columnsAmount);\n            setSymbolsMap(generatedSlotSymbols);\n\n            setSpinning(true);\n            // We have to pass the slot symbol inside spin(), because otherwise the state update happens to fast and the Slot it self\n            // do not get the updated value, when the spin starts\n            const visibleSlotSymbols = await current.spin(generatedSlotSymbols);\n            setSpinning(false);\n\n            setWinningSymbols(getWinningSymbols(visibleSlotSymbols, rowsAmount, columnsAmount));\n        }\n    }, [rowsAmount, columnsAmount]);\n\n    return {\n        winningSymbols,\n        lastAmountOfProfit,\n        moneyStake,\n        setMoneyStake,\n        isSpinning,\n        setSpinning,\n        isAutoSpinMode,\n        setAutoSpinMode,\n        symbolsMap,\n        registerSlot,\n        spin,\n        rowsAmount,\n        columnsAmount,\n    };\n};\n\nexport interface SlotContextProviderProps {\n    rows?: number;\n    columns?: number;\n}\n\nexport const SlotContextProvider: React.FunctionComponent<SlotContextProviderProps> = ({ children, rows, columns }) => {\n    const store = useStore(rows, columns);\n    return <SlotContext.Provider value={store}>{children}</SlotContext.Provider>;\n};\n\n// Create the hook to access the context\nexport const useSlotContext = () => useContext<SlotContextType>(SlotContext);\n","import React from 'react';\nimport { createUseStyles, WithStylesProps } from 'react-jss';\nimport classNames from 'clsx';\nimport { Theme } from '../../tools/Theme';\n\nconst useStyles = createUseStyles<Theme>(\n    (theme) => ({\n        root: {\n            padding: theme.spacing,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            background: theme.palette.primary.dark,\n            border: `2px solid ${theme.palette.common.border}`,\n            cursor: 'pointer',\n            color: theme.palette.common.white,\n            '&:focus': {\n                outline: 'none',\n            },\n        },\n        disabled: {\n            backgroundColor: '#6e7b9e',\n        },\n    }),\n    { name: 'Button' }\n);\n\nexport interface ButtonProps extends React.ComponentProps<'button'>, Partial<WithStylesProps<typeof useStyles>> {\n    className?: string;\n}\n\nconst Button = (props: ButtonProps) => {\n    const { className, classes: classesProp, children, disabled, ...restProps } = props;\n    const classes = useStyles({ ...props, classes: classesProp });\n\n    return (\n        <button className={classNames(className, classes.root, { [classes.disabled]: disabled })} disabled={disabled} {...restProps}>\n            {children}\n        </button>\n    );\n};\n\nexport default Button;\n","import React from 'react';\nimport { createUseStyles } from 'react-jss';\nimport Button, { ButtonProps } from './Button';\nimport classNames from 'clsx';\n\nconst useStyles = createUseStyles(\n    {\n        root: {\n            borderRadius: '100%',\n            width: 40,\n            height: 40,\n        },\n    },\n    { name: 'RoundButton' }\n);\n\nexport interface RoundButtonProps extends ButtonProps {}\n\nconst RoundButton = (props: RoundButtonProps) => {\n    const { className, classes: classesProp, children, ...restProps } = props;\n    const classes = useStyles({ ...props, classes: classesProp });\n\n    return (\n        <Button className={classNames(className, classes.root)} {...restProps}>\n            {children}\n        </Button>\n    );\n};\n\nexport default RoundButton;\n","import React from 'react';\nimport { createUseStyles } from 'react-jss';\nimport classNames from 'clsx';\nimport RoundButton from '../../../components/Button/RoundButton';\nimport { FaMinus as DecreaseIcon, FaPlus as IncreaseIcon } from 'react-icons/fa';\nimport { Theme } from '../../../tools/Theme';\n\nconst useStyles = createUseStyles<Theme>(\n    (theme) => ({\n        root: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        icon: {\n            fontSize: '2rem',\n        },\n        button: {\n            width: 30,\n            height: 30,\n        },\n        container: {\n            textAlign: 'center',\n            padding: theme.spacing,\n            border: `2px solid ${theme.palette.common.border}`,\n            borderRadius: 4,\n            background: theme.palette.primary.dark,\n            color: theme.palette.common.white,\n            margin: `0px ${theme.spacing}px`,\n            width: 150,\n        },\n    }),\n    { name: 'MoneyStakeAction' }\n);\n\nexport interface MoneyStakeActionProps {\n    className?: string;\n    moneyStake: number;\n    increase: () => void;\n    decrease: () => void;\n\n    increaseDisabled?: boolean;\n    decreaseDisabled?: boolean;\n}\n\nexport const MoneyStakeAction = (props: MoneyStakeActionProps) => {\n    const { className, moneyStake, increase, decrease, decreaseDisabled, increaseDisabled } = props;\n    const classes = useStyles(props);\n\n    return (\n        <div className={classNames(classes.root, className)}>\n            <RoundButton className={classes.button} disabled={decreaseDisabled} onClick={decrease}>\n                <DecreaseIcon className={classes.icon} />\n            </RoundButton>\n            <div className={classes.container}>{moneyStake.toFixed(2)} €</div>\n            <RoundButton className={classes.button} disabled={increaseDisabled} onClick={increase}>\n                <IncreaseIcon className={classes.icon} />\n            </RoundButton>\n        </div>\n    );\n};\n","import classNames from 'clsx';\nimport React from 'react';\nimport { createUseStyles } from 'react-jss';\nimport RoundButton, { RoundButtonProps } from '../../../components/Button/RoundButton';\nimport { Theme } from '../../../tools/Theme';\nimport { FaPlay as PlayIcon } from 'react-icons/fa';\n\nconst useStyles = createUseStyles<Theme>(\n    (theme) => ({\n        root: {\n            height: 80,\n            width: 80,\n            border: `4px solid ${theme.palette.common.border}`,\n            zIndex: 2,\n        },\n        icon: {\n            fontSize: '1rem',\n        },\n    }),\n    { name: 'SpinAction' }\n);\n\nexport interface SpinActionProps extends RoundButtonProps {}\n\nexport const SpinAction = (props: SpinActionProps) => {\n    const { className, ...restProps } = props;\n    const classes = useStyles(props);\n\n    return (\n        <RoundButton className={classNames(classes.root, className)} {...restProps}>\n            <PlayIcon className={classes.icon} />\n        </RoundButton>\n    );\n};\n","import React from 'react';\nimport { createUseStyles } from 'react-jss';\nimport classNames from 'clsx';\nimport { Theme } from '../../../tools/Theme';\n\nconst useStyles = createUseStyles<Theme>(\n    (theme) => ({\n        root: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            textAlign: 'center',\n            padding: theme.spacing,\n            border: `2px solid ${theme.palette.common.border}`,\n            borderRadius: 4,\n            background: theme.palette.primary.dark,\n            color: theme.palette.common.white,\n            margin: `0px ${theme.spacing}px`,\n            width: 150,\n        },\n    }),\n    { name: 'MoneyStakeAction' }\n);\n\nexport interface BalanceProps {\n    className?: string;\n    balance: number;\n}\n\nexport const Balance = (props: BalanceProps) => {\n    const { className, balance } = props;\n    const classes = useStyles(props);\n\n    return <div className={classNames(classes.root, className)}>{balance.toFixed(2)} €</div>;\n};\n","import classNames from 'clsx';\nimport React, { HTMLAttributes } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { Theme } from '../../../tools/Theme';\nimport { useSlotContext } from '../../tools/SlotContext';\nimport { MoneyStakeAction } from './MoneyStakeAction';\nimport { SpinAction } from './SpinAction';\nimport { useAccountContext } from '../../../tools/context/AccountContext';\nimport { Balance } from './Balance';\n\nconst useStyles = createUseStyles<Theme>(\n    (theme) => ({\n        root: {\n            width: '100%',\n            background: theme.palette.primary.main,\n            position: 'relative',\n            padding: theme.spacing,\n            display: 'flex',\n            height: 60,\n            justifyContent: 'space-between',\n        },\n        autoSpinAction: {},\n        spinAction: {\n            position: 'absolute',\n            left: '50%',\n            bottom: 25,\n        },\n    }),\n    { name: 'SlotActionBar' }\n);\n\nexport interface SlotActionBarProps extends HTMLAttributes<HTMLDivElement> {}\n\nexport const SlotActionBar = (props: SlotActionBarProps) => {\n    const { className, ...restProps } = props;\n    const classes = useStyles(props);\n    const { spin, isSpinning, moneyStake, setMoneyStake } = useSlotContext();\n    const { money } = useAccountContext();\n\n    const increaseMoneyStake = () => {\n        setMoneyStake((moneyStake) => {\n            if (moneyStake < 1) {\n                return moneyStake + 0.1;\n            }\n            return moneyStake + 1;\n        });\n    };\n\n    const decreaseMoneyStake = () => {\n        if (moneyStake <= 0.1) {\n            return;\n        }\n\n        if (moneyStake > 1) {\n            setMoneyStake((moneyStake) => moneyStake - 1);\n        } else {\n            setMoneyStake((moneyStake) => moneyStake - 0.1);\n        }\n    };\n\n    return (\n        <div className={classNames(classes.root, className)} {...restProps}>\n            <MoneyStakeAction\n                moneyStake={moneyStake}\n                increase={increaseMoneyStake}\n                decrease={decreaseMoneyStake}\n                decreaseDisabled={moneyStake <= 0.1 || isSpinning}\n                increaseDisabled={isSpinning}\n            />\n            <SpinAction className={classes.spinAction} disabled={isSpinning || money < moneyStake} onClick={spin} />\n            <Balance balance={money} />\n        </div>\n    );\n};\n\nSlotActionBar.displayName = 'SlotActionBar';\n","import classNames from 'clsx';\nimport React from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { Theme } from '../../../tools/Theme';\nimport { ExtendedSlotSymbol } from '../../tools/SlotSymbols';\n\nconst useStyles = createUseStyles<Theme>(\n    (theme) => ({\n        root: {\n            position: 'relative',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            border: `4px solid ${theme.palette.common.white}`,\n            backgroundPosition: 'center',\n            backgroundRepeat: 'no-repeat',\n            backgroundSize: 'cover',\n        },\n        text: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            fontSize: '3rem',\n            color: theme.palette.common.white,\n        },\n        highlight: {\n            animation: '$heartbeat 1s infinite',\n        },\n        '@keyframes heartbeat': {\n            '0%': {\n                transform: 'scale(.90)',\n            },\n            '20%': {\n                transform: 'scale(1)',\n            },\n            '40%': {\n                transform: 'scale(.90)',\n            },\n            '60%': {\n                transform: 'scale(1)',\n            },\n            '80%': {\n                transform: 'scale(.90)',\n            },\n            '100%': {\n                transform: 'scale(.90)',\n            },\n        },\n    }),\n    { name: 'SlotItem' }\n);\n\nexport interface SlotItemProps {\n    className?: string;\n    symbol: ExtendedSlotSymbol;\n}\n\nexport const SlotItem = (props: SlotItemProps) => {\n    const { className, symbol } = props;\n    const classes = useStyles(props);\n\n    return (\n        <div\n            className={classNames(className, classes.root, { [classes.highlight]: symbol.highlight })}\n            style={{\n                backgroundImage: `url(\"${symbol.image}\")`,\n            }}\n        />\n    );\n};\n\nSlotItem.displayName = 'SlotItem';\n","export default __webpack_public_path__ + \"static/media/spin-click-sound.033469a0.mp3\";","import classNames from 'clsx';\nimport React, { forwardRef, HTMLAttributes, Ref, RefObject, useImperativeHandle, useRef } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { ExtendedSlotSymbol } from '../../tools/SlotSymbols';\nimport { SlotItem } from './SlotItem';\n// @ts-ignore\nimport spinSound from '../../assets/spin-click-sound.mp3';\n\n// noinspection JSSuspiciousNameCombination\nconst useStyles = createUseStyles(\n    {\n        root: ({ width, index }: SlotColumnProps) => ({\n            width: width,\n            left: index * width,\n            transition: 'bottom 0.1s ease-in-out',\n            bottom: 0,\n        }),\n        slotItem: ({ width }: SlotColumnProps) => ({\n            width: width,\n            height: width,\n        }),\n    },\n    { name: 'SlotColumn' }\n);\n\nexport interface SlotColumnProps extends Omit<HTMLAttributes<HTMLDivElement>, 'children'> {\n    /**\n     * Defines the width of a column\n     */\n    width: number;\n    /**\n     * The index of the column\n     */\n    index: number;\n    slotSymbols: ExtendedSlotSymbol[];\n    rowsAmount: number;\n}\n\nexport interface SlotColumnRef {\n    spin: (spinTime: number, slotSymbols: ExtendedSlotSymbol[]) => Promise<ExtendedSlotSymbol[]>;\n    ref: RefObject<HTMLDivElement>;\n}\n\nconst START_POSITION = 0;\n\n/**\n * Returns the visible slot items of a column\n * @param symbols\n *  All symbols\n * @param symbolHeight\n *  The height in pixels of the symbol\n * @param position\n *  The position of the column on the y axis (negative value)\n * @param visibleSlotItemAmount\n *  The amount of visible slot items in a column\n */\nconst calculateVisibleSymbols = (\n    symbols: ExtendedSlotSymbol[],\n    symbolHeight: number,\n    position: number,\n    visibleSlotItemAmount: number\n): ExtendedSlotSymbol[] => {\n    // How often fits the symbolHeight into the position\n    const offset = -position / symbolHeight;\n    return Array.from({ length: visibleSlotItemAmount })\n        .map((_, index) => {\n            const symbolsIndex = symbols.length - offset - (index + 1);\n            return symbols[symbolsIndex];\n        })\n        .reverse();\n};\n\nconst audio = new Audio(spinSound);\n\nexport const SlotColumn = forwardRef((props: SlotColumnProps, ref: Ref<SlotColumnRef>) => {\n    const { className, style, width, index, slotSymbols, rowsAmount, ...restProps } = props;\n    const classes = useStyles({ ...props, width: width });\n\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    const spin = (spinTime: number, slotSymbols: ExtendedSlotSymbol[]): Promise<ExtendedSlotSymbol[]> => {\n        const { current } = rootRef;\n        return new Promise<ExtendedSlotSymbol[]>((resolve) => {\n            let internalPosition = START_POSITION;\n\n            const intervalId = setInterval(() => {\n                // Check if the limit of the column got reached. If yes, reset it to the start position\n                if (internalPosition <= -(width * (slotSymbols.length - rowsAmount))) {\n                    internalPosition = START_POSITION;\n                }\n\n                // remove the width (width equals height) from the current position.\n                // Because of this, the animation will stop perfectly.\n                internalPosition = internalPosition - width;\n\n                if (current) {\n                    // update the bottom style\n                    current.style.bottom = `${internalPosition}px`;\n                }\n            }, 100);\n\n            setTimeout(() => {\n                // stop the spinning\n                clearInterval(intervalId);\n\n                // noinspection JSIgnoredPromiseFromCall\n                audio.play();\n\n                const spinResult = calculateVisibleSymbols(slotSymbols, width, internalPosition, rowsAmount);\n                resolve(spinResult);\n            }, spinTime);\n        });\n    };\n\n    useImperativeHandle(ref, () => ({\n        spin: spin,\n        ref: rootRef,\n    }));\n\n    return (\n        <div className={classNames(classes.root, className)} ref={rootRef} {...restProps}>\n            {slotSymbols.map((slotSymbol, index) => (\n                <SlotItem key={index} className={classes.slotItem} symbol={slotSymbol} />\n            ))}\n        </div>\n    );\n});\n\nSlotColumn.displayName = 'SlotColumn';\n","import React, { HTMLAttributes, memo, useEffect, useRef } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { Theme } from '../../../tools/Theme';\nimport classNames from 'clsx';\nimport { ExtendedSlotSymbol } from '../../tools/SlotSymbols';\n\nconst useStyles = createUseStyles<Theme>(\n    (theme) => ({\n        root: {\n            width: '100%',\n            height: '100%',\n        },\n        canvas: {\n            width: '100%',\n            height: '100%',\n        },\n    }),\n    { name: 'WinIndicatorItem' }\n);\n\nexport interface WinIndicatorItemProps extends Omit<HTMLAttributes<HTMLDivElement>, 'children'> {\n    className?: string;\n    beforeWinningSymbol?: ExtendedSlotSymbol;\n    winningSymbol?: ExtendedSlotSymbol;\n    nextWinningSymbol?: ExtendedSlotSymbol;\n}\n\nexport const WinIndicatorItem = memo((props: WinIndicatorItemProps) => {\n    const { className, beforeWinningSymbol, winningSymbol, nextWinningSymbol, ...restProps } = props;\n    const classes = useStyles(props);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    useEffect(() => {\n        const { current } = canvasRef;\n        if (!current) {\n            return;\n        }\n\n        // It is possible, that this item has no win to display. We have to check it\n        if (!winningSymbol) {\n            return;\n        }\n\n        const canvasContext = current.getContext('2d');\n        if (!canvasContext) {\n            return;\n        }\n\n        const beforeRowIndex = beforeWinningSymbol?.rowIndex;\n        const rowIndex = winningSymbol.rowIndex;\n        const nextRowIndex = nextWinningSymbol?.rowIndex;\n\n        const { height, width } = current.getBoundingClientRect();\n        const xCenter = width / 2;\n        const yCenter = height / 2;\n\n        console.log('height', height, 'width', width, 'xCenter', xCenter, 'yCenter', yCenter);\n\n        if ((!beforeRowIndex && rowIndex === nextRowIndex) || (!nextRowIndex && beforeRowIndex === rowIndex)) {\n            canvasContext.beginPath();\n            canvasContext.lineWidth = 10;\n            canvasContext.moveTo(0, yCenter);\n            console.log('moveTo', 0, yCenter);\n            canvasContext.lineTo(width, yCenter);\n            console.log('lineTo', width, yCenter);\n            canvasContext.stroke();\n            return;\n        }\n    }, [canvasRef, beforeWinningSymbol, winningSymbol, nextWinningSymbol]);\n\n    return (\n        <div className={classNames(classes.root, className)} {...restProps}>\n            <canvas className={classes.canvas} ref={canvasRef} />\n        </div>\n    );\n});\n\nWinIndicatorItem.displayName = 'WinIndicatorItem';\n","import React, { HTMLAttributes, memo } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { Theme } from '../../../tools/Theme';\nimport classNames from 'clsx';\nimport { ExtendedSlotSymbol } from '../../tools/SlotSymbols';\nimport { WinIndicatorItem } from './WinIndicatorItem';\n\nconst useStyles = createUseStyles<Theme>(\n    (theme) => ({\n        root: {\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n        },\n        column: {\n            display: 'flex',\n            flexDirection: 'column',\n            flex: 1,\n        },\n        item: {\n            flex: 1,\n        },\n    }),\n    { name: 'WinIndicatorGrid' }\n);\n\nexport interface WinIndicatorGridProps extends Omit<HTMLAttributes<HTMLDivElement>, 'children'> {\n    className?: string;\n    columnAmount: number;\n    rowAmount: number;\n    winningSymbols: ExtendedSlotSymbol[];\n}\n\nexport const WinIndicatorGrid = memo((props: WinIndicatorGridProps) => {\n    const { className, columnAmount, rowAmount, winningSymbols, ...restProps } = props;\n    const classes = useStyles(props);\n\n    const getWinningSymbolIndex = (columnIndex: number, rowIndex: number): number => {\n        return winningSymbols.findIndex((symbol) => symbol.rowIndex === rowIndex && symbol.columnIndex === columnIndex);\n    };\n\n    return (\n        <div className={classNames(classes.root, className)} {...restProps}>\n            {Array.from(Array(columnAmount).keys()).map((_, columnIndex) => (\n                <div key={columnIndex} className={classes.column}>\n                    {Array.from(Array(rowAmount).keys()).map((_, rowIndex) => {\n                        const winningSymbolIndex = getWinningSymbolIndex(columnIndex, rowIndex);\n\n                        return (\n                            <WinIndicatorItem\n                                key={rowIndex}\n                                className={classes.item}\n                                beforeWinningSymbol={winningSymbols[winningSymbolIndex - 1]}\n                                winningSymbol={winningSymbols[winningSymbolIndex]}\n                                nextWinningSymbol={winningSymbols[winningSymbolIndex + 1]}\n                            />\n                        );\n                    })}\n                </div>\n            ))}\n        </div>\n    );\n});\n\nWinIndicatorGrid.displayName = 'WinIndicatorGrid';\n","import classNames from 'clsx';\nimport React, { forwardRef, HTMLAttributes, Ref, RefObject, useImperativeHandle, useLayoutEffect, useRef, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { Theme } from '../../../tools/Theme';\nimport { ExtendedSlotSymbol } from '../../tools/SlotSymbols';\nimport { SlotColumn, SlotColumnRef } from './SlotColumn';\nimport { WinIndicatorGrid } from '../winIndicatorGrind/WinIndicatorGrid';\n\nconst useStyles = createUseStyles<Theme>(\n    {\n        root: {\n            display: 'grid',\n            gridTemplateColumns: 'repeat(5, 1fr)',\n            position: 'relative',\n            overflow: 'hidden',\n        },\n        slotColumn: {\n            position: 'absolute',\n        },\n        winIndicatorGrid: {\n            position: 'absolute',\n            zIndex: 1,\n        },\n    },\n    { name: 'Slot' }\n);\n\nexport interface SlotProps extends HTMLAttributes<HTMLDivElement> {\n    rowsAmount: number;\n    columnsAmount: number;\n    symbolsMap: ExtendedSlotSymbol[][];\n    winningSymbols: ExtendedSlotSymbol[][];\n}\n\nexport interface SlotRef {\n    spin: (slotSymbols: ExtendedSlotSymbol[][]) => Promise<ExtendedSlotSymbol[][]>;\n    columnRefs: RefObject<SlotColumnRef[]>;\n}\n\nexport const Slot = forwardRef((props: SlotProps, ref: Ref<SlotRef>) => {\n    const { className, symbolsMap, rowsAmount, columnsAmount, winningSymbols, ...restProps } = props;\n    const classes = useStyles(props);\n\n    const [columnWidth, setColumnWidth] = useState<number>(0);\n    const rootRef = useRef<HTMLDivElement>(null);\n    const columnRefs = useRef<SlotColumnRef[]>([]);\n\n    /**\n     * Register a slot column reference for a specific index\n     * @param index\n     */\n    const handleSlotColumnRef = (index: number) => {\n        return (ref: SlotColumnRef) => {\n            columnRefs.current[index] = ref;\n        };\n    };\n\n    const spin = (slotSymbols: ExtendedSlotSymbol[][]): Promise<ExtendedSlotSymbol[][]> => {\n        return new Promise<ExtendedSlotSymbol[][]>(async (resolve) => {\n            if (columnWidth !== 0 && columnRefs.current.length !== 0) {\n                const visibleSymbols = await Promise.all(\n                    columnRefs.current.map((columnRef, index) => {\n                        return columnRef.spin(500 + index * 500, slotSymbols[index]);\n                    })\n                );\n                resolve(visibleSymbols);\n            }\n        });\n    };\n\n    useLayoutEffect(() => {\n        const { current } = rootRef;\n        if (current) {\n            setColumnWidth(current.getBoundingClientRect().width / columnsAmount);\n        }\n    }, [rootRef, columnsAmount]);\n\n    useImperativeHandle(ref, () => ({\n        spin: spin,\n        columnRefs: columnRefs,\n    }));\n\n    return (\n        <div\n            className={classNames(classes.root, className)}\n            ref={rootRef}\n            style={{\n                height: columnWidth * rowsAmount,\n            }}\n            {...restProps}\n        >\n            {winningSymbols.map((winningSymbols, index) => (\n                <WinIndicatorGrid\n                    key={index}\n                    className={classes.winIndicatorGrid}\n                    columnAmount={columnsAmount}\n                    rowAmount={rowsAmount}\n                    winningSymbols={winningSymbols}\n                />\n            ))}\n            {symbolsMap.map((slotSymbols, index) => (\n                <SlotColumn\n                    key={index}\n                    ref={handleSlotColumnRef(index)}\n                    className={classes.slotColumn}\n                    index={index}\n                    width={columnWidth}\n                    rowsAmount={rowsAmount}\n                    slotSymbols={slotSymbols}\n                />\n            ))}\n        </div>\n    );\n});\n\nSlot.displayName = 'Slot';\n","import classNames from 'clsx';\nimport React from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { Theme } from '../../tools/Theme';\n\nconst useStyles = createUseStyles<Theme>(\n    (theme) => ({\n        root: {\n            position: 'absolute',\n            zIndex: 1,\n            width: '100%',\n            height: '100%',\n        },\n        amount: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            fontSize: '5em',\n            fontWeight: 'bold',\n            animation: '$fade-out 4s forwards',\n            color: theme.palette.common.white,\n            transition: 'opacity 0.4s linear',\n        },\n        '@keyframes fade-out': {\n            '0%': {\n                opacity: 1,\n            },\n            '10%': {\n                opacity: 0.9,\n            },\n            '20%': {\n                opacity: 0.8,\n            },\n            '30%': {\n                opacity: 0.7,\n            },\n            '40%': {\n                opacity: 0.6,\n            },\n            '50%': {\n                opacity: 0.5,\n            },\n            '60%': {\n                opacity: 0.4,\n            },\n            '70%': {\n                opacity: 0.3,\n            },\n            '80%': {\n                opacity: 0.2,\n            },\n            '90%': {\n                opacity: 0.1,\n            },\n            '100%': {\n                opacity: 0,\n                animationPlayState: 'paused',\n            },\n        },\n    }),\n    { name: 'AmountOfProfitDisplay' }\n);\n\nexport interface AmountOfProfitDisplayProps {\n    className?: string;\n    amount: number;\n}\n\nexport const AmountOfProfitDisplay = (props: AmountOfProfitDisplayProps) => {\n    const { className, amount } = props;\n    const classes = useStyles(props);\n\n    return (\n        <div className={classNames(classes.root, className)}>\n            <span className={classes.amount}>+ {amount.toFixed(2)} €</span>\n        </div>\n    );\n};\n\nAmountOfProfitDisplay.displayName = 'AmountOfProfitDisplay';\n","import classNames from 'clsx';\nimport React, { HTMLAttributes } from 'react';\nimport { createUseStyles, WithStylesProps } from 'react-jss';\nimport { SlotActionBar } from './components/actionBar/SlotActionBar';\nimport { Slot } from './components/slot/Slot';\nimport { useSlotContext } from './tools/SlotContext';\n\nimport { Theme } from '../tools/Theme';\nimport { AmountOfProfitDisplay } from './components/AmountOfProfitDisplay';\n\nconst useStyles = createUseStyles<Theme>(\n    (theme) => ({\n        root: {\n            height: '100%',\n            width: '100%',\n            position: 'relative',\n            display: 'flex',\n            flexDirection: 'column',\n            backgroundColor: theme.palette.primary.dark,\n            overflow: 'hidden',\n        },\n        slotContainer: {\n            flex: 1,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            padding: theme.spacing * 2,\n        },\n        slot: {\n            width: '90%',\n            maxWidth: 1000,\n        },\n        actionBar: {},\n    }),\n    { name: 'SlotViewContent' }\n);\n\nexport interface SlotViewContentProps extends HTMLAttributes<HTMLDivElement>, Partial<WithStylesProps<typeof useStyles>> {}\n\nexport const SlotViewContent = (props: SlotViewContentProps) => {\n    const { className, ...restProps } = props;\n    const classes = useStyles();\n    const { registerSlot, symbolsMap, rowsAmount, columnsAmount, lastAmountOfProfit, winningSymbols } = useSlotContext();\n\n    return (\n        <div className={classNames(classes.root, className)} {...restProps}>\n            <div className={classes.slotContainer}>\n                {lastAmountOfProfit && <AmountOfProfitDisplay amount={lastAmountOfProfit} />}\n                <Slot\n                    className={classes.slot}\n                    ref={registerSlot}\n                    symbolsMap={symbolsMap}\n                    winningSymbols={winningSymbols}\n                    rowsAmount={rowsAmount}\n                    columnsAmount={columnsAmount}\n                />\n            </div>\n            <SlotActionBar className={classes.actionBar} />\n        </div>\n    );\n};\n\nSlotViewContent.displayName = 'SlotViewContent';\n","import React from 'react';\nimport { SlotContextProvider } from './tools/SlotContext';\nimport { SlotViewContent, SlotViewContentProps } from './SlotViewContent';\n\nexport interface SlotViewProps extends SlotViewContentProps {}\n\nexport const SlotView = (props: SlotViewProps) => (\n    <SlotContextProvider>\n        <SlotViewContent {...props} />\n    </SlotContextProvider>\n);\n","import React from 'react';\nimport { ThemeProvider } from 'react-jss';\nimport { AccountContextProvider } from './tools/context/AccountContext';\nimport { theme } from './tools/Theme';\nimport { SlotView } from './views/SlotView';\nimport { IconContext } from 'react-icons';\n\nconst IconContextValue = {\n    size: '2em',\n};\n\nconst App = () => {\n    return (\n        <ThemeProvider theme={theme}>\n            <AccountContextProvider initialMoney={10}>\n                <IconContext.Provider value={IconContextValue}>\n                    <SlotView />\n                </IconContext.Provider>\n            </AccountContextProvider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}